{"version":3,"sources":["../../src/libs/factory.ts"],"names":["hasOwnProperty","BaseFactory","store","_lock","name","instance","override","call","has","key","Reflect","deleteProperty","func","element"],"mappings":";;;;;;AAAA;;;AAIA,SAASA,cAAT,QAA+B,UAA/B;AAEA;;;;;AAIA,WAAaC,WAAb;AAAA;AAAA;;AAAA,SAOcC,KAPd,GAO4C,EAP5C;AAAA,SAcYC,KAdZ,GAcgD,EAdhD;AAAA;;AAAA;AAAA;;AAgBI;;;;;;;;;;;AAhBJ,wBA2BeC,IA3Bf,EA2B6BC,QA3B7B,EA2B4E;AAAA,UAAlCC,QAAkC,uEAAvB,KAAuB;;AACpE,UAAIN,cAAc,CAACO,IAAf,CAAoB,KAAKJ,KAAzB,EAAgCC,IAAhC,KAA0C,KAAKI,GAAL,CAASJ,IAAT,KAAkB,CAACE,QAAjE,EAA4E;AACxE,eAAO,IAAP;AACH;;AAED,WAAKJ,KAAL,CAAWE,IAAX,IAAmBC,QAAnB;AAEA,aAAO,IAAP;AACH;AAED;;;;;;;AArCJ;AAAA;AAAA,wBA2CeI,GA3Cf,EA2CqC;AAC7B,aAAOT,cAAc,CAACO,IAAf,CAAoB,KAAKL,KAAzB,EAAgCO,GAAhC,CAAP;AACH;AAED;;;;;;;AA/CJ;AAAA;AAAA,wBAqDeA,GArDf,EAqD+B;AACvB,UAAI,KAAKD,GAAL,CAASC,GAAT,CAAJ,EAAmB;AACf,eAAO,KAAKP,KAAL,CAAWO,GAAX,CAAP;AACH;;AAED,aAAO,IAAP;AACH;AAED;;;;;;AA7DJ;AAAA;AAAA,yBAkEgBA,GAlEhB,EAkEmC;AAC3B,UAAI,KAAKD,GAAL,CAASC,GAAT,CAAJ,EAAmB;AACf,aAAKN,KAAL,CAAWM,GAAX,IAAkB,IAAlB;AACH;AACJ;AAED;;;;;;AAxEJ;AAAA;AAAA,2BA6EkBA,GA7ElB,EA6EqC;AAC7B,UAAI,KAAKD,GAAL,CAASC,GAAT,CAAJ,EAAmB;AACfC,QAAAA,OAAO,CAACC,cAAR,CAAuB,KAAKR,KAA5B,EAAmCM,GAAnC;AACH;AACJ;AAED;;;;;;;AAnFJ;AAAA;AAAA,4BAyFmBG,IAzFnB,EAyF6D;AACrD,UAAI,CAACA,IAAL,EAAW;AACP;AACH;;AAED,WAAK,IAAMH,IAAX,IAAkB,KAAKP,KAAvB,EAA8B;AAC1B,YAAMW,OAAO,GAAG,KAAKX,KAAL,CAAWO,IAAX,CAAhB;;AAEA,YAAIG,IAAI,CAACH,IAAD,EAAMI,OAAN,CAAJ,KAAuB,KAA3B,EAAkC;AAC9B;AACH;AACJ;AACJ;AAED;;;;;AAvGJ;AAAA;AAAA,4BA2GyB;AACjB,WAAKX,KAAL,GAAa,EAAb;AACA,WAAKC,KAAL,GAAa,EAAb;AACH;AA9GL;;AAAA;AAAA","sourcesContent":["/**\n * @file 工厂类\n */\n\nimport { hasOwnProperty } from \"../utils\";\n\n/**\n * 工厂类\n * @class\n */\nexport class BaseFactory<T> {\n    /**\n     * 用来存放工厂实例\n     * @protected\n     * @type {{ [id: string]: T; }}\n     * @memberof BaseFactory\n     */\n    protected store: { [id: string]: T; } = {};\n    /**\n     * 用来存放被锁定工厂实例\n     * @private\n     * @type {{ [id: string]: T; }}\n     * @memberof BaseFactory\n     */\n    private _lock: { [id: string]: boolean; } = {};\n\n    /**\n     * 添加一个实例\n     * @param {string} name 实例的名称\n     * @param {T} instance  实例\n     * @param {boolean} [override=false] 是否覆盖\n     * @returns {BaseFactory<T>} 是否添加成功\n     * @memberof BaseFactory\n     * @example\n     * \n     * this.add(\"key\", true);\n     */\n    public add(name: string, instance: T, override = false): BaseFactory<T> {\n        if (hasOwnProperty.call(this._lock, name) || (this.has(name) && !override)) {\n            return this;\n        }\n\n        this.store[name] = instance;\n\n        return this;\n    }\n\n    /**\n     * 是否存在key值\n     * @param {string} key key值\n     * @returns {boolean} 是否存在\n     * @memberof BaseFactory\n     */\n    public has(key: string): boolean {\n        return hasOwnProperty.call(this.store, key);\n    }\n\n    /**\n     * 获取一个实例\n     * @param {string} key  实例标志\n     * @returns {T}         返回当前key对应的实例\n     * @memberof BaseFactory\n     */\n    public get(key: string): T {\n        if (this.has(key)) {\n            return this.store[key];\n        }\n\n        return null as any;\n    }\n\n    /**\n     * 锁定实例,锁定后不能删除和覆盖\n     * @param {string} key  key\n     * @memberof BaseFactory\n     */\n    public lock(key: string): void {\n        if (this.has(key)) {\n            this._lock[key] = true;\n        }\n    }\n\n    /**\n     * 解锁实例\n     * @param {string} key  key\n     * @memberof BaseFactory\n     */\n    public unLock(key: string): void {\n        if (this.has(key)) {\n            Reflect.deleteProperty(this._lock, key);\n        }\n    }\n\n    /**\n     * 遍历所有的元素\n     * @param {(key: string, val: T) => any} func 遍历方法\n     * @returns {void}\n     * @memberof BaseFactory\n     */\n    public forEach(func: (key: string, val: T) => any): void {\n        if (!func) {\n            return;\n        }\n\n        for (const key in this.store) {\n            const element = this.store[key];\n\n            if (func(key, element) === false) {\n                break;\n            }\n        }\n    }\n\n    /**\n     * 清空当前的hash\n     * @memberof BaseFactory\n     */\n    public clear(): void {\n        this.store = {};\n        this._lock = {};\n    }\n}\n"],"file":"factory.js"}