{"version":3,"sources":["../../src/keywords/ref.ts"],"names":["invariant","getDataKeysBySchemaPath","getSchemaId","schemaFieldFactory","$id","schema","$ref","schemaId","refName","has","add","refSchema","get","schemaAjv","Object","assign","Reflect","deleteProperty","refKeys"],"mappings":"AACA,OAAOA,SAAP,MAAsB,WAAtB;AAEA,SAASC,uBAAT,EAAkCC,WAAlC,QAAqD,iBAArD;AACA,SAASC,kBAAT,QAAmC,YAAnC;;AAGA;;;;;;;;;AASA,gBAAe,UAACC,GAAD,EAAcC,MAAd,EAAsC;AACjD,MAAIA,MAAM,IAAIA,MAAM,CAACC,IAArB,EAA2B;AACvB,QAAMC,QAAQ,GAAGL,WAAW,CAACG,MAAM,CAACC,IAAR,CAA5B;AACA,QAAIE,OAAO,GAAGH,MAAM,CAACC,IAArB;;AAEA,QAAID,MAAM,CAACD,GAAX,EAAgB;AACZI,MAAAA,OAAO,GAAGH,MAAM,CAACD,GAAP,GAAaC,MAAM,CAACC,IAA9B;AACH,KAFD,MAEO,IAAI,CAACC,QAAL,EAAe;AAClBC,MAAAA,OAAO,GAAGN,WAAW,CAACE,GAAD,CAAX,GAAmBC,MAAM,CAACC,IAApC;AACH;;AAEDD,IAAAA,MAAM,CAACC,IAAP,GAAcE,OAAd;;AAEA,QAAI,CAACL,kBAAkB,CAACM,GAAnB,CAAuBD,OAAvB,CAAL,EAAsC;AAClCL,MAAAA,kBAAkB,CAACO,GAAnB,CAAuBF,OAAvB,EAAgC,EAAhC;AACH;;AAED,QAAMG,SAA2B,GAAGR,kBAAkB,CAACS,GAAnB,CAAuBJ,OAAvB,CAApC;;AAEA,QAAIG,SAAJ,EAAe;AACX,UAAIE,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,SAAlB,CAAhB;AAEAE,MAAAA,SAAS,CAACP,IAAV,GAAiBE,OAAjB;AAEAQ,MAAAA,OAAO,CAACC,cAAR,CAAuBJ,SAAvB,EAAkC,KAAlC;AACAC,MAAAA,MAAM,CAACC,MAAP,CAAcF,SAAd,EAAyB;AACrBK,QAAAA,OAAO,EAAEjB,uBAAuB,CAACO,OAAD;AADX,OAAzB;AAIA,aAAOK,SAAP;AACH;;AAEDb,IAAAA,SAAS,CAAC,KAAD,YAAWQ,OAAX,iBAAT;AACH;;AAED,SAAOH,MAAP;AACH,CApCD","sourcesContent":["import { JSONSchema6 } from \"json-schema\";\nimport invariant from \"invariant\";\n\nimport { getDataKeysBySchemaPath, getSchemaId } from \"../libs/resolve\";\nimport { schemaFieldFactory } from \"../factory\";\nimport { JsFormJsonSchema } from \"../models/jsonschema\";\n\n/**\n * 解析schema中的关键字 $ref\n * 1. 获取$ref的id\n * 2. 重新定义$id = $id + $ref, 赋值给$ref\n * 3. 解析schema\n * @param  {string}      $id    当前的schema的ID\n * @param  {JSONSchema6} schema 当前的schema\n * @return {JSONSchema6}        处理过后的schema\n */\nexport default ($id: string, schema: JSONSchema6) => {\n    if (schema && schema.$ref) {\n        const schemaId = getSchemaId(schema.$ref);\n        let refName = schema.$ref;\n\n        if (schema.$id) {\n            refName = schema.$id + schema.$ref;\n        } else if (!schemaId) {\n            refName = getSchemaId($id) + schema.$ref;\n        }\n\n        schema.$ref = refName;\n\n        if (!schemaFieldFactory.has(refName)) {\n            schemaFieldFactory.add(refName, {});\n        }\n\n        const refSchema: JsFormJsonSchema = schemaFieldFactory.get(refName);\n\n        if (refSchema) {\n            let schemaAjv = Object.assign({}, refSchema) as JSONSchema6;\n\n            schemaAjv.$ref = refName;\n\n            Reflect.deleteProperty(schemaAjv, \"$id\");\n            Object.assign(schemaAjv, {\n                refKeys: getDataKeysBySchemaPath(refName)\n            });\n\n            return schemaAjv;\n        }\n\n        invariant(false, `${refName} not exist.`);\n    }\n\n    return schema;\n};\n"],"file":"ref.js"}