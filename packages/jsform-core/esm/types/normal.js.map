{"version":3,"sources":["../../src/types/normal.ts"],"names":["schemaFieldFactory","schemaKeysFactory","schemaKeyWordFactory","getDataKeysBySchemaPath","getSchemaId","convertKeys","$id","schema","forEach","_key","val","schemaKey","keys","currentSchema","alreadyHasEmptySchema","emptySchema","has","get","schemaPath","$ref","add","Object","assign","concat","join"],"mappings":"AAEA,SAASA,kBAAT,EAA6BC,iBAA7B,EAAgDC,oBAAhD,QAA4E,YAA5E;AACA,SAASC,uBAAT,EAAkCC,WAAlC,QAAqD,iBAArD;AAGA;;;;;;AAKA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAcC,MAAd,EAAmD;AAC1EL,EAAAA,oBAAoB,CAACM,OAArB,CAA6B,UAACC,IAAD,EAAeC,GAAf,EAA0E;AACnG,QAAIH,MAAJ,EAAY;AACRA,MAAAA,MAAM,GAAGG,GAAG,CAACJ,GAAD,EAAMC,MAAN,CAAZ;AACH;AACJ,GAJD;AAMA,SAAOA,MAAP;AACH,CARM;AAWP;;;;;;;AAMA,gBAAe,UAACI,SAAD,EAAoBJ,MAApB,EAA4C;AACvD,MAAIK,IAAc,GAAGT,uBAAuB,CAACQ,SAAD,EAAY,KAAZ,CAA5C;AAAA,MACIL,GAAG,GAAGF,WAAW,CAACO,SAAD,CAAX,IAA0BJ,MAAM,CAACD,GAAjC,IAAwC,EADlD;AAAA,MAEIO,aAAa,GAAGR,WAAW,CAACM,SAAD,EAAYJ,MAAZ,CAF/B;AAAA,MAGIO,qBAAqB,GAAG,KAH5B;AAAA,MAIIC,WAAgB,GAAG,EAJvB,CADuD,CAOvD;;AACAD,EAAAA,qBAAqB,GAAGd,kBAAkB,CAACgB,GAAnB,CAAuBL,SAAvB,CAAxB;;AACA,MAAIG,qBAAJ,EAA2B;AACvBC,IAAAA,WAAW,GAAGf,kBAAkB,CAACiB,GAAnB,CAAuBN,SAAvB,CAAd;AACH,GAXsD,CAavD;;;AACA,MAAIG,qBAAqB,IAAIC,WAAW,CAACG,UAAzC,EAAqD;AACjD,WAAOL,aAAa,IAAIN,MAAxB;AACH;;AAED,MAAIA,MAAM,CAACD,GAAP,IAAcC,MAAM,CAACY,IAAzB,EAA+B;AAC3BlB,IAAAA,iBAAiB,CAACmB,GAAlB,CAAsBb,MAAM,CAACD,GAA7B,EAAkCC,MAAM,CAACY,IAAzC;AACH,GApBsD,CAsBvD;;;AACAnB,EAAAA,kBAAkB,CAACoB,GAAnB,CACIT,SADJ,EAEIU,MAAM,CAACC,MAAP,CAAcP,WAAd,EAA2BF,aAAa,IAAIN,MAA5C,EAAoD;AAChD;AACAW,IAAAA,UAAU,EAAEP;AAFoC,GAApD,CAFJ,EAvBuD,CA8BvD;;AACAV,EAAAA,iBAAiB,CAACmB,GAAlB,CAAsB,CAACd,GAAD,EAAMiB,MAAN,CAAaX,IAAb,EAAmBY,IAAnB,CAAwB,GAAxB,CAAtB,EAAoDb,SAApD;AAEA,SAAOE,aAAa,IAAIN,MAAxB;AACH,CAlCD","sourcesContent":["import { JSONSchema6 } from \"json-schema\";\n\nimport { schemaFieldFactory, schemaKeysFactory, schemaKeyWordFactory } from \"../factory\";\nimport { getDataKeysBySchemaPath, getSchemaId } from \"../libs/resolve\";\n\n\n/**\n * 遍历所有的keyword，解析schema\n * @param   {JSONSchema6} schema schema\n * @returns {JSONSchema6}        解析过后的schema\n */\nexport const convertKeys = ($id: string, schema: JSONSchema6): JSONSchema6 => {\n    schemaKeyWordFactory.forEach((_key: string, val: ($id: string, schema: JSONSchema6) => JSONSchema6) => {\n        if (schema) {\n            schema = val($id, schema);\n        }\n    });\n\n    return schema;\n};\n\n\n/**\n * 解析schema中的type!=array && type!=object的结构\n * @param  {JSONSchema6} schema    当前的schema\n * @param  {String}      schemaKey 当前的schemaKey\n * @return {JSONSchema6}           返回处理过后的schema\n */\nexport default (schemaKey: string, schema: JSONSchema6) => {\n    let keys: string[] = getDataKeysBySchemaPath(schemaKey, false),\n        $id = getSchemaId(schemaKey) || schema.$id || \"\",\n        currentSchema = convertKeys(schemaKey, schema),\n        alreadyHasEmptySchema = false,\n        emptySchema: any = {};\n\n    // 先从缓存中提取schema，如果存在的话\n    alreadyHasEmptySchema = schemaFieldFactory.has(schemaKey);\n    if (alreadyHasEmptySchema) {\n        emptySchema = schemaFieldFactory.get(schemaKey);\n    }\n\n    // 如果已经存在，则直接返回\n    if (alreadyHasEmptySchema && emptySchema.schemaPath) {\n        return currentSchema || schema;\n    }\n\n    if (schema.$id && schema.$ref) {\n        schemaKeysFactory.add(schema.$id, schema.$ref);\n    }\n\n    // 将当前获取的schema加入到schemaFieldFactory中\n    schemaFieldFactory.add(\n        schemaKey,\n        Object.assign(emptySchema, currentSchema || schema, {\n            // keys,\n            schemaPath: schemaKey\n        })\n    );\n    // 加入key的索引\n    schemaKeysFactory.add([$id].concat(keys).join(\"/\"), schemaKey);\n\n    return currentSchema || schema;\n};\n"],"file":"normal.js"}