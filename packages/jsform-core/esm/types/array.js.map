{"version":3,"sources":["../../src/types/array.ts"],"names":["resolve","itemsName","schemaPath","schema","items","itemSchemaPath","join"],"mappings":"AAEA,SAASA,OAAT,QAAwB,iBAAxB;AAEA,IAAMC,SAAS,GAAG,OAAlB;AAEA;;;;;;;;AAOA,gBAAe,UAACC,UAAD,EAAqBC,MAArB,EAA6C;AAAA,MAClDC,KADkD,GACxCD,MADwC,CAClDC,KADkD;;AAGxD,MAAIA,KAAJ,EAAW;AACP,QAAMC,cAAc,GAAG,CAACH,UAAD,EAAaD,SAAb,EAAwBK,IAAxB,CAA6B,GAA7B,CAAvB;AAEAN,IAAAA,OAAO,CAACI,KAAD,EAAuBC,cAAvB,CAAP,CAHO,CAIP;AAEA;AACA;AACA;AACH;;AAED,SAAOF,MAAP;AACH,CAfD","sourcesContent":["import { JSONSchema6 } from \"json-schema\";\n\nimport { resolve } from \"../libs/resolve\";\n\nconst itemsName = \"items\";\n\n/**\n * 解析schema中的type=array的结构\n * 如果存在items,则继续解析schema.item\n * @param  {JSONSchema6} schema    当前的schema\n * @param  {String}      schemaPath 当前的schemaPath ,example \"a#/properties/b/properties/c\"\n * @return {JSONSchema6}           返回处理过后的schema,example \"{title:'21',$id:'a'}\"\n */\nexport default (schemaPath: string, schema: JSONSchema6) => {\n    let { items } = schema;\n\n    if (items) {\n        const itemSchemaPath = [schemaPath, itemsName].join(\"/\");\n\n        resolve(items as JSONSchema6, itemSchemaPath);\n        // const keys: string[] = getDataKeysBySchemaPath(itemSchemaPath);\n\n        // Object.assign(mergeSchema, {\n        //     keys\n        // });\n    }\n\n    return schema;\n};\n"],"file":"array.js"}