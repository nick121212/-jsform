{"version":3,"sources":["../../src/types/object.ts"],"names":["invariant","resolve","pro","schemaKey","schema","properties","required","$ref","Object","keys","forEach","key","indexOf","assign","isRequired","join"],"mappings":"AACA,OAAOA,SAAP,MAAsB,WAAtB;AAEA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,IAAMC,GAAG,GAAG,YAAZ;AAEA;;;;;;;;AAOA,gBAAe,UAACC,SAAD,EAAoBC,MAApB,EAA4C;AAAA,MAC/CC,UAD+C,GACXD,MADW,CAC/CC,UAD+C;AAAA,yBACXD,MADW,CACnCE,QADmC;AAAA,MACnCA,QADmC,iCACxB,EADwB;AAAA,MACpBC,IADoB,GACXH,MADW,CACpBG,IADoB;;AAGvD,MAAIF,UAAU,IAAI,CAACE,IAAnB,EAAyB;AACrBC,IAAAA,MAAM,CAACC,IAAP,CAAYJ,UAAZ,EAAwBK,OAAxB,CAAgC,UAACC,GAAD,EAAiB;AAC7C,UAAI,CAACT,GAAD,EAAM,OAAN,EAAeU,OAAf,CAAuBD,GAAvB,KAA+B,CAAnC,EAAsC;AAClCX,QAAAA,SAAS,CAAC,KAAD,YAAWW,GAAX,2BAAT;AAEA;AACH;;AAED,UAAI,CAACN,UAAD,IAAe,CAACA,UAAU,CAACM,GAAD,CAA9B,EAAqC;AACjC;AACH;;AAEDH,MAAAA,MAAM,CAACK,MAAP,CAAcR,UAAU,CAACM,GAAD,CAAxB,EAA+B;AAC3BG,QAAAA,UAAU,EAAER,QAAQ,CAACM,OAAT,CAAiBD,GAAjB,KAAyB;AADV,OAA/B;AAIAV,MAAAA,OAAO,CACHI,UAAU,CAACM,GAAD,CADP,EAEH,CAACR,SAAD,EAAYD,GAAZ,EAAiBS,GAAjB,EAAsBI,IAAtB,CAA2B,GAA3B,CAFG,CAAP,CAf6C,CAmB7C;AACA;AACA;AAEA;AACA;AACA;AACH,KA1BD;AA2BH;;AAED,SAAOX,MAAP;AACH,CAlCD","sourcesContent":["import { JSONSchema6 } from \"json-schema\";\nimport invariant from \"invariant\";\n\nimport { resolve } from \"../libs/resolve\";\n\nconst pro = \"properties\";\n\n/**\n * 解析schema中的type=object的结构\n * 如果存在schema.properties,则遍历properties，继续解析schema.properties[key]\n * @param  {JSONSchema6} schema    当前的schema\n * @param  {String}      schemaKey 当前的schemaKey\n * @return {JSONSchema6}           返回处理过后的schema\n */\nexport default (schemaKey: string, schema: JSONSchema6) => {\n    const { properties, required = [], $ref } = schema;\n\n    if (properties && !$ref) {\n        Object.keys(properties).forEach((key: string) => {\n            if ([pro, \"items\"].indexOf(key) >= 0) {\n                invariant(false, `${key}can not be key words.`);\n\n                return;\n            }\n\n            if (!properties || !properties[key]) {\n                return;\n            }\n\n            Object.assign(properties[key], {\n                isRequired: required.indexOf(key) >= 0,\n            });\n\n            resolve(\n                properties[key] as JSONSchema6,\n                [schemaKey, pro, key].join(\"/\")\n            );\n            // const keys: string[] = getDataKeysBySchemaPath(\n            //     [schemaKey, pro, key].join(\"/\")\n            // );\n\n            // Object.assign(mergeSchema, {\n            //     keys,\n            // });\n        });\n    }\n\n    return schema;\n};\n"],"file":"object.js"}